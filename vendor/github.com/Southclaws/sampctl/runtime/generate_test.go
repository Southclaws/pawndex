package runtime

import (
	"io/ioutil"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/Southclaws/sampctl/types"
)

func Test_GenerateServerCfg(t *testing.T) {
	type args struct {
		cfg *types.Runtime
	}
	tests := []struct {
		name    string
		args    args
		wantCfg string
		wantErr bool
	}{
		{
			"servercfg-linux",
			args{&types.Runtime{
				Platform:   "linux",
				WorkingDir: "./tests/generate",
				Announce:   &[]bool{true}[0],
				Hostname:   &[]string{"Test"}[0],
				MaxPlayers: &[]int{32}[0],
				Port:       &[]int{8080}[0],
				RCON:       &[]bool{true}[0],
				Language:   &[]string{"English"}[0],
				Gamemodes: []string{
					"rivershell",
					"baserace",
				},
				Filterscripts: []string{
					"admin",
				},
				Plugins: []types.Plugin{
					"mysql",
				},
				RCONPassword: &[]string{"test"}[0],
			}},
			`echo loading server.cfg generated by sampctl - do not edit this file manually, edit samp.json instead!
gamemode0 rivershell
gamemode1 baserace
filterscripts admin
plugins mysql.so
rcon_password test
port 8080
hostname Test
maxplayers 32
language English
mapname San Andreas
weburl www.sa-mp.com
gamemodetext Unknown
announce 1
lanmode 0
query 1
rcon 1
logqueries 0
sleep 5
maxnpc 0
stream_rate 1000
stream_distance 200.000000
onfoot_rate 30
incar_rate 30
weapon_rate 30
chatlogging 1
timestamp 1
logtimeformat [%H:%M:%S]
messageholelimit 3000
messageslimit 500
ackslimit 3000
playertimeout 10000
minconnectiontime 0
lagcompmode 1
connseedtime 300000
db_logging 0
db_log_queries 0
conncookies 1
cookielogging 0
output 1
`,
			false,
		},
		{
			"servercfg-windows",
			args{&types.Runtime{
				Platform:   "windows",
				WorkingDir: "./tests/generate",
				Announce:   &[]bool{true}[0],
				Hostname:   &[]string{"Test"}[0],
				MaxPlayers: &[]int{32}[0],
				Port:       &[]int{8080}[0],
				RCON:       &[]bool{true}[0],
				Language:   &[]string{"English"}[0],
				Gamemodes: []string{
					"rivershell",
					"baserace",
				},
				Filterscripts: []string{
					"admin",
				},
				Plugins: []types.Plugin{
					"mysql",
				},
				RCONPassword: &[]string{"test"}[0],
			}},
			`echo loading server.cfg generated by sampctl - do not edit this file manually, edit samp.json instead!
gamemode0 rivershell
gamemode1 baserace
filterscripts admin
plugins mysql
rcon_password test
port 8080
hostname Test
maxplayers 32
language English
mapname San Andreas
weburl www.sa-mp.com
gamemodetext Unknown
announce 1
lanmode 0
query 1
rcon 1
logqueries 0
sleep 5
maxnpc 0
stream_rate 1000
stream_distance 200.000000
onfoot_rate 30
incar_rate 30
weapon_rate 30
chatlogging 1
timestamp 1
logtimeformat [%H:%M:%S]
messageholelimit 3000
messageslimit 500
ackslimit 3000
playertimeout 10000
minconnectiontime 0
lagcompmode 1
connseedtime 300000
db_logging 0
db_log_queries 0
conncookies 1
cookielogging 0
output 1
`,
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := GenerateServerCfg(tt.args.cfg); (err != nil) != tt.wantErr {
				t.Errorf("Config.GenerateServerCfg() error = %v, wantErr %v", err, tt.wantErr)
			}

			raw, _ := ioutil.ReadFile("./tests/generate/server.cfg")
			gotCfg := string(raw)

			assert.Equal(t, tt.wantCfg, gotCfg)
		})
	}
}

func TestConfig_GenerateJSON(t *testing.T) {
	tests := []struct {
		name    string
		config  types.Runtime
		want    []byte
		wantErr bool
	}{
		{
			"minimal",
			types.Runtime{
				WorkingDir: "./tests/generate-json",
				Gamemodes: []string{
					"rivershell",
					"baserace",
				},
				RCONPassword: &[]string{"test"}[0],
				Port:         &[]int{8080}[0],
				Hostname:     &[]string{"Test"}[0],
				MaxPlayers:   &[]int{32}[0],
				Language:     &[]string{"English"}[0],
				Announce:     &[]bool{true}[0],
				RCON:         &[]bool{true}[0],
			},
			[]byte(`{
	"gamemodes": [
		"rivershell",
		"baserace"
	],
	"rcon_password": "test",
	"port": 8080,
	"hostname": "Test",
	"maxplayers": 32,
	"language": "English",
	"announce": true,
	"rcon": true
}`),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := GenerateJSON(tt.config)
			assert.NoError(t, err)

			contents, err := ioutil.ReadFile(filepath.Join(tt.config.WorkingDir, "samp.json"))
			assert.NoError(t, err)

			assert.Equal(t, string(tt.want), string(contents))
		})
	}
}

func TestConfig_GenerateYAML(t *testing.T) {
	tests := []struct {
		name    string
		config  types.Runtime
		want    []byte
		wantErr bool
	}{
		{
			"minimal",
			types.Runtime{
				WorkingDir: "./tests/generate-yaml",
				Gamemodes: []string{
					"rivershell",
					"baserace",
				},
				RCONPassword: &[]string{"test"}[0],
				Port:         &[]int{8080}[0],
				Hostname:     &[]string{"Test"}[0],
				MaxPlayers:   &[]int{32}[0],
				Language:     &[]string{"English"}[0],
				Announce:     &[]bool{true}[0],
				RCON:         &[]bool{true}[0],
			},
			[]byte(`announce: true
gamemodes:
- rivershell
- baserace
hostname: Test
language: English
maxplayers: 32
port: 8080
rcon: true
rcon_password: test
`),
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := GenerateYAML(tt.config)
			assert.NoError(t, err)

			contents, err := ioutil.ReadFile(filepath.Join(tt.config.WorkingDir, "samp.yaml"))
			assert.NoError(t, err)

			assert.Equal(t, string(tt.want), string(contents))
		})
	}
}
